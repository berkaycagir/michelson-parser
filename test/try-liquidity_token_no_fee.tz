parameter
  (or (pair %transfer address (pair nat (pair :fee (nat %tx_fee) (nat %tx_burn))))
      (or (pair %approve address (pair nat (pair :fee (nat %tx_fee) (nat %tx_burn))))
          (or (pair %transferFrom
                 address
                 (pair address (pair nat (pair :fee (nat %tx_fee) (nat %tx_burn)))))
              (or (pair %balanceOf address address)
                  (or (pair %allowance address (pair address address))
                      (or (list %createAccounts (pair address nat))
                          (or (pair %updateConversionRate nat mutez) (unit %default))))))));
storage
  (pair :storage
     (big_map :accounts
        address
        (pair :account (nat %balance) (map %allowances address nat)))
     (pair (nat %version)
           (pair (nat %totalSupply)
                 (pair (nat %decimals)
                       (pair (string %name)
                             (pair (string %symbol) (pair (address %owner) (pair %conversion_rate nat mutez))))))));
code { DUP ;
       DIP { CDR @storage_slash_1 } ;
       CAR @parameter_slash_2 ;
       LAMBDA @perform_transfer
         (pair address
               (pair address
                     (pair nat
                           (pair :storage
                              (big_map :accounts
                                 address
                                 (pair :account (nat %balance) (map %allowances address nat)))
                              (pair (nat %version)
                                    (pair (nat %totalSupply)
                                          (pair (nat %decimals)
                                                (pair (string %name)
                                                      (pair (string %symbol) (pair (address %owner) (pair %conversion_rate nat mutez)))))))))))
         (pair (list operation)
               (pair :storage
                  (big_map :accounts
                     address
                     (pair :account (nat %balance) (map %allowances address nat)))
                  (pair (nat %version)
                        (pair (nat %totalSupply)
                              (pair (nat %decimals)
                                    (pair (string %name)
                                          (pair (string %symbol) (pair (address %owner) (pair %conversion_rate nat mutez)))))))))
         { RENAME @from_dest_tokens_storage_slash_3 ;
           DUP @from_dest_tokens_storage ;
           CAR @from ;
           DIP { DUP @from_dest_tokens_storage } ;
           SWAP ;
           { CDR ; CAR @dest } ;
           DIP 2 { DUP @from_dest_tokens_storage } ;
           DIG 2 ;
           { CDR ; CDR ; CAR @tokens } ;
           DIP 3 { DUP @from_dest_tokens_storage } ;
           DIG 3 ;
           { CDR ; CDR ; CDR @storage } ;
           LAMBDA @get_account
             (pair address
                   (big_map address (pair :account (nat %balance) (map %allowances address nat))))
             (pair :account (nat %balance) (map %allowances address nat))
             { RENAME @a_accounts_slash_8 ;
               DUP @a_accounts ;
               CDR @accounts ;
               DIP { DUP @a_accounts } ;
               SWAP ;
               CAR @a ;
               GET ;
               IF_NONE
                 { PUSH (map address nat) {} ; PUSH nat 0 ; PAIR %balance %allowances }
                 {} ;
               DIP { DROP } } ;
           DIP { DUP @storage } ;
           SWAP ;
           CAR @accounts %accounts ;
           DIP { DUP @get_account } ;
           SWAP ;
           DIP { DUP @accounts } ;
           SWAP ;
           DIP 7 { DUP @from } ;
           DIG 7 ;
           PAIR ;
           EXEC @account_sender ;
           DIP { DUP @accounts } ;
           SWAP ;
           DIP 5 { DUP @tokens } ;
           DIG 5 ;
           DIP 2 { DUP @account_sender } ;
           DIG 2 ;
           CAR %balance ;
           SUB ;
           ISNAT ;
           IF_NONE
             { DIP { DUP @account_sender } ;
               SWAP ;
               CAR %balance ;
               PUSH string "Not enough tokens for transfer" ;
               PAIR ;
               FAILWITH }
             { DIP 2 { DUP @account_sender } ;
               DIG 2 ;
               CDR %allowances ;
               DIP { DUP @b } ;
               DIP 2 { DROP } ;
               SWAP ;
               PAIR %balance %allowances } ;
           RENAME @new_account_sender ;
           DIP 8 { DUP @from } ;
           DIG 8 ;
           DIP { SOME } ;
           UPDATE @accounts ;
           DIP 3 { DUP @get_account } ;
           DIG 3 ;
           DIP { DUP @accounts } ;
           SWAP ;
           DIP 8 { DUP @dest } ;
           DIG 8 ;
           PAIR ;
           EXEC @account_dest ;
           DIP 5 { DUP @storage } ;
           DIG 5 ;
           CDR ;
           DIP 2 { DUP @accounts } ;
           DIG 2 ;
           DIP 2 { DUP @account_dest } ;
           DIG 2 ;
           CDR %allowances ;
           DIP 9 { DUP @tokens } ;
           DIG 9 ;
           DIP 4 { DUP @account_dest } ;
           DIG 4 ;
           CAR %balance ;
           ADD ;
           PAIR @new_account_dest %balance %allowances ;
           DIP 10 { DUP @dest } ;
           DIG 10 ;
           DIP { SOME } ;
           DIP 4 { DROP 10 } ;
           UPDATE @accounts ;
           PAIR %accounts ;
           NIL operation ;
           PAIR } ;
       LAMBDA @get_account
         (pair address
               (big_map address (pair :account (nat %balance) (map %allowances address nat))))
         (pair :account (nat %balance) (map %allowances address nat))
         { RENAME @a_accounts_slash_22 ;
           DUP @a_accounts ;
           CDR @accounts ;
           DIP { DUP @a_accounts } ;
           SWAP ;
           CAR @a ;
           GET ;
           IF_NONE
             { PUSH (map address nat) {} ; PUSH nat 0 ; PAIR %balance %allowances }
             {} ;
           DIP { DROP } } ;
       DIP 2 { DUP @parameter } ;
       DIG 2 ;
       IF_LEFT
         { RENAME @_dest_tokens_fee_slash_57 ;
           DIP 2 { DUP @perform_transfer } ;
           DIG 2 ;
           DIP 3 { DUP @perform_transfer } ;
           DIG 3 ;
           DIP 6 { DUP @storage } ;
           DIG 6 ;
           DIP 3 { DUP } ;
           DIG 3 ;
           { CDR ; CDR @fee } ;
           PAIR ;
           PAIR ;
           DUP ;
           CAR ;
           CAR @fee ;
           DIP { DUP } ;
           SWAP ;
           CAR ;
           CDR @storage ;
           COLLECT_CALL ;
           IF { DIP 2 { DUP } ;
                DIG 2 ;
                CDR @perform_transfer_slash_21 ;
                DIP { DUP @storage } ;
                SWAP ;
                DIP 3 { DUP @fee } ;
                DIG 3 ;
                CDR %tx_burn ;
                DIP 4 { DUP @fee } ;
                DIG 4 ;
                CAR %tx_fee ;
                ADD ;
                PAIR ;
                DIP 2 { DUP @storage } ;
                DIG 2 ;
                { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CAR %owner } ;
                PAIR ;
                SENDER ;
                PAIR ;
                EXEC ;
                CDR }
              { DUP @storage } ;
           DIP { DROP 3 } ;
           DIP 2 { DUP } ;
           DIG 2 ;
           { CDR ; CAR @tokens } ;
           PAIR ;
           DIP 2 { DUP } ;
           DIG 2 ;
           DIP 3 { DROP } ;
           CAR @dest ;
           PAIR ;
           SENDER ;
           PAIR ;
           EXEC }
         { IF_LEFT
             { RENAME @_spender_tokens_fee_slash_63 ;
               DUP ;
               CAR @spender ;
               DIP { DUP } ;
               SWAP ;
               { CDR ; CAR @tokens } ;
               DIP 4 { DUP @perform_transfer } ;
               DIG 4 ;
               DIP 7 { DUP @storage } ;
               DIG 7 ;
               DIP 4 { DUP } ;
               DIG 4 ;
               { CDR ; CDR @fee } ;
               PAIR ;
               PAIR ;
               DUP ;
               CAR ;
               CAR @fee ;
               DIP { DUP } ;
               SWAP ;
               CAR ;
               CDR @storage ;
               COLLECT_CALL ;
               IF { DIP 2 { DUP } ;
                    DIG 2 ;
                    CDR @perform_transfer_slash_21 ;
                    DIP { DUP @storage } ;
                    SWAP ;
                    DIP 3 { DUP @fee } ;
                    DIG 3 ;
                    CDR %tx_burn ;
                    DIP 4 { DUP @fee } ;
                    DIG 4 ;
                    CAR %tx_fee ;
                    ADD ;
                    PAIR ;
                    DIP 2 { DUP @storage } ;
                    DIG 2 ;
                    { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CAR %owner } ;
                    PAIR ;
                    SENDER ;
                    PAIR ;
                    EXEC ;
                    CDR }
                  { DUP @storage } ;
               DIP { DROP 3 } ;
               DIP 4 { DUP @get_account } ;
               DIG 4 ;
               DIP { DUP @storage } ;
               SWAP ;
               CAR %accounts ;
               SENDER ;
               PAIR ;
               EXEC @account_sender ;
               DIP { DUP @storage } ;
               SWAP ;
               CDR ;
               DIP 2 { DUP @storage } ;
               DIG 2 ;
               CAR %accounts ;
               DIP 2 { DUP @account_sender } ;
               DIG 2 ;
               CAR %balance ;
               PUSH nat 0 ;
               DIP 6 { DUP @tokens } ;
               DIG 6 ;
               COMPARE ;
               EQ ;
               IF { DIP 3 { DUP @account_sender } ;
                    DIG 3 ;
                    CDR %allowances ;
                    DIP 7 { DUP @spender } ;
                    DIG 7 ;
                    DIP { NONE nat } ;
                    UPDATE }
                  { DIP 3 { DUP @account_sender } ;
                    DIG 3 ;
                    CDR %allowances ;
                    DIP 6 { DUP @tokens } ;
                    DIG 6 ;
                    DIP 8 { DUP @spender } ;
                    DIG 8 ;
                    DIP { SOME } ;
                    UPDATE } ;
               SWAP ;
               PAIR @account_sender %balance %allowances ;
               SENDER ;
               DIP { SOME } ;
               DIP 4 { DROP 5 } ;
               UPDATE ;
               PAIR @storage %accounts ;
               NIL operation ;
               PAIR }
             { IF_LEFT
                 { RENAME @_from_dest_tokens_fee_slash_72 ;
                   DUP ;
                   CAR @from ;
                   DIP { DUP } ;
                   SWAP ;
                   { CDR ; CDR ; CAR @tokens } ;
                   DIP 4 { DUP @perform_transfer } ;
                   DIG 4 ;
                   DIP 7 { DUP @storage } ;
                   DIG 7 ;
                   DIP 4 { DUP } ;
                   DIG 4 ;
                   { CDR ; CDR ; CDR @fee } ;
                   PAIR ;
                   PAIR ;
                   DUP ;
                   CAR ;
                   CAR @fee ;
                   DIP { DUP } ;
                   SWAP ;
                   CAR ;
                   CDR @storage ;
                   COLLECT_CALL ;
                   IF { DIP 2 { DUP } ;
                        DIG 2 ;
                        CDR @perform_transfer_slash_21 ;
                        DIP { DUP @storage } ;
                        SWAP ;
                        DIP 3 { DUP @fee } ;
                        DIG 3 ;
                        CDR %tx_burn ;
                        DIP 4 { DUP @fee } ;
                        DIG 4 ;
                        CAR %tx_fee ;
                        ADD ;
                        PAIR ;
                        DIP 2 { DUP @storage } ;
                        DIG 2 ;
                        { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CAR %owner } ;
                        PAIR ;
                        SENDER ;
                        PAIR ;
                        EXEC ;
                        CDR }
                      { DUP @storage } ;
                   DIP { DROP 3 } ;
                   DIP 4 { DUP @get_account } ;
                   DIG 4 ;
                   DIP { DUP @storage } ;
                   SWAP ;
                   CAR %accounts ;
                   DIP 4 { DUP @from } ;
                   DIG 4 ;
                   PAIR ;
                   EXEC @account_from ;
                   DIP 6 { DUP @perform_transfer } ;
                   DIG 6 ;
                   DIP 2 { DUP @storage } ;
                   DIG 2 ;
                   CDR ;
                   DIP 3 { DUP @storage } ;
                   DIG 3 ;
                   CAR %accounts ;
                   DIP 3 { DUP @account_from } ;
                   DIG 3 ;
                   CAR %balance ;
                   DIP 4 { DUP @account_from } ;
                   DIG 4 ;
                   CDR %allowances ;
                   SENDER ;
                   GET ;
                   IF_NONE
                     { DIP 7 { DUP @from } ;
                       DIG 7 ;
                       PUSH string "Not allowed to spend from" ;
                       PAIR ;
                       FAILWITH }
                     { DIP 7 { DUP @tokens } ;
                       DIG 7 ;
                       DIP { DUP @allowed } ;
                       SWAP ;
                       SUB ;
                       ISNAT ;
                       IF_NONE
                         { DUP @allowed ;
                           PUSH string "Not enough allowance for transfer" ;
                           PAIR ;
                           FAILWITH }
                         { PUSH nat 0 ;
                           DIP { DUP @allowed } ;
                           SWAP ;
                           COMPARE ;
                           EQ ;
                           IF { DIP 6 { DUP @account_from } ;
                                DIG 6 ;
                                CDR %allowances ;
                                SENDER ;
                                DIP { NONE nat } ;
                                UPDATE }
                              { DIP 6 { DUP @account_from } ;
                                DIG 6 ;
                                CDR %allowances ;
                                DIP { DUP @allowed } ;
                                SWAP ;
                                SENDER ;
                                DIP { SOME } ;
                                UPDATE } ;
                           DIP { DROP } } ;
                       DIP { DROP } } ;
                   RENAME @new_allowances_from ;
                   SWAP ;
                   PAIR @account_from %balance %allowances ;
                   DIP 7 { DUP @from } ;
                   DIG 7 ;
                   DIP { SOME } ;
                   UPDATE ;
                   PAIR @storage %accounts ;
                   DIP 4 { DUP @tokens } ;
                   DIG 4 ;
                   PAIR ;
                   DIP 6 { DUP } ;
                   DIG 6 ;
                   { CDR ; CAR @dest } ;
                   PAIR ;
                   DIP 5 { DUP @from } ;
                   DIG 5 ;
                   DIP 3 { DROP 5 } ;
                   PAIR ;
                   EXEC }
                 { IF_LEFT
                     { RENAME @_spender_forward_slash_85 ;
                       DIP 4 { DUP @storage } ;
                       DIG 4 ;
                       DUP @storage ;
                       NIL operation ;
                       DIP 3 { DUP } ;
                       DIG 3 ;
                       CDR @forward ;
                       CONTRACT %main nat ;
                       IF_NONE
                         { PUSH string "No entrypoint main with parameter type nat" ; FAILWITH }
                         {} ;
                       PUSH mutez 0 ;
                       DIP 4 { DUP @storage } ;
                       DIG 4 ;
                       CAR %accounts ;
                       DIP 6 { DUP } ;
                       DIG 6 ;
                       CAR @spender ;
                       GET ;
                       IF_NONE { PUSH nat 0 } { CAR %balance } ;
                       DIP 5 { DROP 2 } ;
                       RENAME @spender_balance ;
                       TRANSFER_TOKENS ;
                       CONS ;
                       PAIR }
                     { IF_LEFT
                         { RENAME @_from_spender_forward_slash_91 ;
                           DIP 4 { DUP @storage } ;
                           DIG 4 ;
                           DUP @storage ;
                           NIL operation ;
                           DIP 3 { DUP } ;
                           DIG 3 ;
                           { CDR ; CDR @forward } ;
                           CONTRACT %main (pair nat nat) ;
                           IF_NONE
                             { PUSH string "No entrypoint main with parameter type (nat * nat)" ;
                               FAILWITH }
                             {} ;
                           PUSH mutez 0 ;
                           DIP 4 { DUP @storage } ;
                           DIG 4 ;
                           CAR %accounts ;
                           DIP 6 { DUP } ;
                           DIG 6 ;
                           CAR @from ;
                           GET ;
                           IF_NONE
                             { PUSH (pair nat nat) (Pair 0 0) }
                             { DUP @account ;
                               CDR %allowances ;
                               DIP 7 { DUP } ;
                               DIG 7 ;
                               { CDR ; CAR @spender } ;
                               GET ;
                               IF_NONE
                                 { DUP @account ; CAR %balance ; PUSH nat 0 ; PAIR }
                                 { DIP { DUP @account } ;
                                   SWAP ;
                                   CAR %balance ;
                                   DIP { DUP @allowed } ;
                                   DIP 2 { DROP } ;
                                   SWAP ;
                                   PAIR } ;
                               DIP { DROP } } ;
                           DIP 5 { DROP 2 } ;
                           RENAME @spender_allowance ;
                           TRANSFER_TOKENS ;
                           CONS ;
                           PAIR }
                         { IF_LEFT
                             { RENAME @new_accounts_slash_99 ;
                               DIP 4 { DUP @storage } ;
                               DIG 4 ;
                               DUP @storage ;
                               { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CAR %owner } ;
                               SENDER ;
                               COMPARE ;
                               NEQ ;
                               IF { PUSH string "Only owner can create accounts" ; FAILWITH } { UNIT } ;
                               DROP ;
                               DUP @storage ;
                               NIL operation ;
                               PAIR ;
                               DIP 2 { DUP @new_accounts } ;
                               DIG 2 ;
                               ITER { RENAME @_dest_tokens__ops_storage_slash_101 ;
                                      DIP { DUP } ;
                                      PAIR ;
                                      DUP ;
                                      CDR ;
                                      CDR @storage ;
                                      DIP 6 { DUP @perform_transfer } ;
                                      DIG 6 ;
                                      DIP { DUP @storage } ;
                                      SWAP ;
                                      DIP 3 { DUP } ;
                                      DIG 3 ;
                                      CAR ;
                                      CDR @tokens ;
                                      PAIR ;
                                      DIP 3 { DUP } ;
                                      DIG 3 ;
                                      CAR ;
                                      CAR @dest ;
                                      PAIR ;
                                      DIP 2 { DUP @storage } ;
                                      DIG 2 ;
                                      DIP 3 { DROP 3 } ;
                                      { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CAR %owner } ;
                                      PAIR ;
                                      EXEC } ;
                               DIP { DROP 2 } }
                             { IF_LEFT
                                 { RENAME @new_rate_slash_106 ;
                                   DIP 4 { DUP @storage } ;
                                   DIG 4 ;
                                   DUP @storage ;
                                   { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CAR %owner } ;
                                   SENDER ;
                                   COMPARE ;
                                   NEQ ;
                                   IF { PUSH string "Only owner can change rate" ; FAILWITH } { UNIT } ;
                                   DROP ;
                                   DUP @storage ;
                                   DUP ;
                                   CAR %accounts ;
                                   SWAP ;
                                   CDR ;
                                   DUP ;
                                   CAR %version ;
                                   SWAP ;
                                   CDR ;
                                   DUP ;
                                   CAR %totalSupply ;
                                   SWAP ;
                                   CDR ;
                                   DUP ;
                                   CAR %decimals ;
                                   SWAP ;
                                   CDR ;
                                   DUP ;
                                   CAR %name ;
                                   SWAP ;
                                   CDR ;
                                   DUP ;
                                   CAR %symbol ;
                                   SWAP ;
                                   CDR ;
                                   CAR %owner ;
                                   DIP 8 { DUP @new_rate } ;
                                   DIG 8 ;
                                   DIP 8 { DROP 2 } ;
                                   SWAP ;
                                   PAIR %owner %conversion_rate ;
                                   SWAP ;
                                   PAIR %symbol ;
                                   SWAP ;
                                   PAIR %name ;
                                   SWAP ;
                                   PAIR %decimals ;
                                   SWAP ;
                                   PAIR %totalSupply ;
                                   SWAP ;
                                   PAIR %version ;
                                   SWAP ;
                                   PAIR %accounts ;
                                   NIL operation ;
                                   PAIR }
                                 { RENAME @__slash_108 ;
                                   DIP 4 { DUP @storage } ;
                                   DIG 4 ;
                                   DIP { DROP } ;
                                   NIL operation ;
                                   PAIR } } } } } } } ;
       DIP { DROP 4 } };
code @fee
  { DUP ;
    DIP { CDR @storage_slash_1 } ;
    CAR @parameter_slash_2 ;
    LAMBDA @precheck
      (pair address
            (pair nat
                  (big_map address (pair :account (nat %balance) (map %allowances address nat)))))
      unit
      { RENAME @source_tokens_accounts_slash_134 ;
        DUP @source_tokens_accounts ;
        { CDR ; CDR @accounts } ;
        { DIP { DUP @source_tokens_accounts } ; SWAP } ;
        CAR @source ;
        GET ;
        IF_NONE
          { PUSH string "Precheck: no account for source" ; FAILWITH }
          { { DIP { DUP @source_tokens_accounts } ; SWAP } ;
            { CDR ; CAR @tokens } ;
            { DIP { DUP @account } ; SWAP } ;
            CAR %balance ;
            COMPARE ;
            LT ;
            IF { PUSH string "Precheck: insufficient source balance" ; FAILWITH }
               { UNIT } ;
            DIP { DROP } } ;
        DIP { DROP } } ;
    LAMBDA @convert_token_fee
      (pair (pair :fee (nat %tx_fee) (nat %tx_burn)) (pair nat mutez))
      (pair mutez nat)
      { RENAME @token_fee_conversion_rate_slash_140 ;
        DUP @token_fee_conversion_rate ;
        CAR @token_fee ;
        { DIP { DUP @token_fee_conversion_rate } ; SWAP } ;
        CDR @conversion_rate ;
        DUP ;
        CAR @token_rate ;
        { DIP { DUP } ; SWAP } ;
        CDR @dun_rate ;
        PUSH mutez 1000 ;
        { DIP 2 { DUP @token_rate } ; DIG 2 } ;
        { DIP 2 { DUP @dun_rate } ; DIG 2 } ;
        { DIP 6 { DUP @token_fee } ; DIG 6 } ;
        CDR %tx_burn ;
        MUL ;
        EDIV ;
        IF_NONE { UNIT ; FAILWITH } { DUP ; CAR @burn ; DIP { DROP } } ;
        RENAME @dun_burn ;
        EDIV ;
        IF_NONE { UNIT ; FAILWITH } { DUP ; CAR @nb_bytes ; DIP { DROP } } ;
        RENAME @burn_bytes ;
        { DIP 2 { DUP @token_rate } ; DIG 2 } ;
        { DIP 2 { DUP @dun_rate } ; DIG 2 } ;
        { DIP 6 { DUP @token_fee } ; DIG 6 } ;
        CAR %tx_fee ;
        MUL ;
        EDIV ;
        IF_NONE { UNIT ; FAILWITH } { DUP ; CAR @fee ; DIP { DROP } } ;
        RENAME @dun_fee ;
        PAIR ;
        DIP { DROP } ;
        DIP { DROP } ;
        DIP { DROP } ;
        DIP { DROP } ;
        DIP { DROP } } ;
    { DIP 2 { DUP @parameter } ; DIG 2 } ;
    IF_LEFT
      { RENAME @_dest_tokens_fee_slash_164 ;
        { DIP 4 { DUP @storage } ; DIG 4 } ;
        { DIP { DUP } ; SWAP } ;
        { CDR ; CDR @fee } ;
        { DIP 4 { DUP @precheck } ; DIG 4 } ;
        { DIP 2 { DUP @storage } ; DIG 2 } ;
        CAR %accounts ;
        { DIP 2 { DUP @fee } ; DIG 2 } ;
        CDR %tx_burn ;
        { DIP 3 { DUP @fee } ; DIG 3 } ;
        CAR %tx_fee ;
        { DIP 6 { DUP } ; DIG 6 } ;
        { CDR ; CAR @tokens } ;
        ADD ;
        ADD ;
        PAIR ;
        SENDER ;
        PAIR ;
        EXEC ;
        DROP ;
        { DIP 3 { DUP @convert_token_fee } ; DIG 3 } ;
        { DIP 2 { DUP @storage } ; DIG 2 } ;
        { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CDR %conversion_rate } ;
        { DIP 2 { DUP @fee } ; DIG 2 } ;
        PAIR ;
        EXEC ;
        DIP { DROP } ;
        DIP { DROP } ;
        DIP { DROP } }
      { IF_LEFT
          { RENAME @_spender_tokens_fee_slash_169 ;
            { DIP 4 { DUP @storage } ; DIG 4 } ;
            { DIP { DUP } ; SWAP } ;
            { CDR ; CDR @fee } ;
            { DIP 4 { DUP @precheck } ; DIG 4 } ;
            { DIP 2 { DUP @storage } ; DIG 2 } ;
            CAR %accounts ;
            { DIP 2 { DUP @fee } ; DIG 2 } ;
            CDR %tx_burn ;
            { DIP 3 { DUP @fee } ; DIG 3 } ;
            CAR %tx_fee ;
            ADD ;
            PAIR ;
            SENDER ;
            PAIR ;
            EXEC ;
            DROP ;
            { DIP 3 { DUP @convert_token_fee } ; DIG 3 } ;
            { DIP 2 { DUP @storage } ; DIG 2 } ;
            { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CDR %conversion_rate } ;
            { DIP 2 { DUP @fee } ; DIG 2 } ;
            PAIR ;
            EXEC ;
            DIP { DROP } ;
            DIP { DROP } ;
            DIP { DROP } }
          { IF_LEFT
              { RENAME @_from_dest_tokens_fee_slash_174 ;
                { DIP 4 { DUP @storage } ; DIG 4 } ;
                { DIP { DUP } ; SWAP } ;
                { CDR ; CDR ; CDR @fee } ;
                { DIP 4 { DUP @precheck } ; DIG 4 } ;
                { DIP 2 { DUP @storage } ; DIG 2 } ;
                CAR %accounts ;
                { DIP 2 { DUP @fee } ; DIG 2 } ;
                CDR %tx_burn ;
                { DIP 3 { DUP @fee } ; DIG 3 } ;
                CAR %tx_fee ;
                ADD ;
                PAIR ;
                SENDER ;
                PAIR ;
                EXEC ;
                DROP ;
                { DIP 4 { DUP @precheck } ; DIG 4 } ;
                { DIP 2 { DUP @storage } ; DIG 2 } ;
                CAR %accounts ;
                { DIP 4 { DUP } ; DIG 4 } ;
                { CDR ; CDR ; CAR @tokens } ;
                PAIR ;
                { DIP 4 { DUP } ; DIG 4 } ;
                CAR @from ;
                PAIR ;
                EXEC ;
                DROP ;
                { DIP 3 { DUP @convert_token_fee } ; DIG 3 } ;
                { DIP 2 { DUP @storage } ; DIG 2 } ;
                { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CDR %conversion_rate } ;
                { DIP 2 { DUP @fee } ; DIG 2 } ;
                PAIR ;
                EXEC ;
                DIP { DROP } ;
                DIP { DROP } ;
                DIP { DROP } }
              { IF_LEFT
                  { RENAME @_spender_forward_slash_180 ;
                    PUSH string "I don't pay fees for balanceOf" ;
                    FAILWITH }
                  { IF_LEFT
                      { RENAME @_from_spender_forward_slash_184 ;
                        PUSH string "I don't pay fees for allowance" ;
                        FAILWITH }
                      { IF_LEFT
                          { RENAME @new_accounts_slash_189 ;
                            PUSH string "I don't pay fees for createAccounts" ;
                            FAILWITH }
                          { IF_LEFT
                              { RENAME @new_rate_slash_191 ;
                                PUSH string "I don't pay fees for updateConversionRate" ;
                                FAILWITH }
                              { RENAME @__slash_193 ;
                                PUSH string "I don't pay fees for default" ;
                                FAILWITH } } } } } } } ;
    DIP { DROP } ;
    DIP { DROP } ;
    DIP { DROP 2 } };